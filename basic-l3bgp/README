An NSO Tail-f HCC Combined Layer-2 and Layer-3 BGP Example Setup
================================================================

This is an example implementation for demonstration purposes of the example
setup described by the NSO Administration Guide chapter "Tail-f HCC Package"
under "Tail-f HCC Usage".
For details on the Tail-f HCC package, see the NSO Administration Guide.
While this example use containers it is not intended as a guide to running
NSO in Docker. See "NSO in Docker for development and production" for
guidance: https://gitlab.com/nso-developer/nso-docker

Example Network Overview
~~~~~~~~~~~~~~~~~~~~~~~~
router: FRRouting Zebra + BGP and nftables port forwarding + NAT
paris:  NSO, Tail-f HCC package (uses GoBGP and iproute2 utils)
london: NSO, Tail-f HCC package (uses GoBGP and iproute2 utils)

  ---------------  docker 0 default bridge  ---------------
                              | .1
                              |
                        172.17.0.0/16
                              |
                              | .2
                    +------------------+
                    | router           |
                    | ID: 172.17.0.2   |
                    | AS: 64514        |
                    +------------------+
                     .2 /           \ .2
                       /             \
          192.168.30.0/24           192.168.31.0/24
                     /                 \
                .98 /                   \ .99
  +-------------------+               +-------------------+
  | london            |               | paris             |
  | ID: 192.168.30.98 |               | ID: 192.168.31.99 |
  | AS: 64513         |               | AS: 64512         |
  +-------------------+               +-------------------+

Prerequisites
~~~~~~~~~~~~~
NSO_VERSION >= 5.8
nso-${NSO_VERSION}.linux.x86_64.installer.bin
ncs-${NSO_VERSION}-tailf-hcc-${TAILF_HCC_VERSION}.tar.gz
Docker installed

Running the Example
~~~~~~~~~~~~~~~~~~~
1. Add the NSO installation and Tail-f HCC packages into the directory of this
   README. If necessary, change the version number NSO_VERSION and
   TAILF_HCC_VERSION variables in the setup.sh file.
2. Run the setup.sh script:
     $ ./setup.sh
   In another shell:
     $ docker ps # to make sure the paris london and router containers are up
3. Examine the paris node output:
   The app/run.sh script will execute the following steps on the paris and
   london nodes:
   a. Reset, setup, start node 1 & 2, and enable HA assuming start-up settings.
      Initial VIP node is the paris node.
   b. Add some dummy config to node 1, replicated to secondary node 2
   c. Stop node 1 to make node 2 failover to primary role. VIP node becomes
      the london node.
   d. Start node 1 that will now assume secondary role
   e. Role-revert the nodes back to start-up settings
   f. Done! The paris node is again the VIP node.
   g. Follow the developer log.
4. Connect to the NSO CLI on the current primary node through the router VIP
   address:
     $ ssh -l admin -p 12024 localhost # mapped from the router 12024 to port
       to the 2024 VIP port on the current primary node.
     admin@ncs# show high-availability status
     admin@ncs# show hcc
     admin@ncs# exit
5. Connect to the london, paris, and router shell to examine the BGP and Linux
   kernel route status.
     $ docker exec -it paris bash
     admin@paris:~/app$ ip address
     admin@paris:~/app$ ip route
     admin@paris:~/app$ cat /tmp/bgp.*.conf
     admin@paris:~/app$ gobgp global
     admin@paris:~/app$ gobgp global rib
     admin@paris:~/app$ gobgp neighbor
     admin@paris:~/app$ exit

     $ docker exec -it router bash
     bash-5.1# ip address
     bash-5.1# ip route
     bash-5.1# vtysh
     router# show bgp summary
     router# show ip bgp
     router# show bgp neighbor
     router# exit
     bash-5.1# exit
6. Examine the setup.sh -> Dockerfile -> app/run.sh -> app/Makefile ->
   router/run.sh files in that order.
7. Cleanup
     $Â docker stop paris london router
     $ docker network rm ParisNet LondonNet

Implementation Details
~~~~~~~~~~~~~~~~~~~~~~
This demo uses Docker containers to set up the Tail-f HCC NSO package in layer 3
BGP mode with NSO and its dependencies as described in the NSO Administration
Guide chapter "Tail-f HCC Package". The steps for the paris, london, and router
nodes described by the documentation are implemented by the setup.sh
Dockerfile, app/run.sh, and router/run.sh files.
- The paris and london container nodes use the Debian Linux distribution while
  the router container node uses Alpine Linux as the FRRouting container use
  that distribution.
- The FRRouting Zebra + BGP implementation is used to set up the BGP-enabled
  router node as described by the NSO Administration Guide.
- For demo purposes, the default gateway of the london and paris nodes is
  changed from the default docker bridge to go through the router node using
  iproute2 commands. See the app/run.sh file for details on the "ip route"
  commands.
- nftables is used for translating (NAT) the london and paris source IP address
  to enable them to access the bridge network and forward 12024 on the router
  node to the VIP address port 2024 of NSO. The port forwarding enables SSH
  access from the Docker host to the NSO CLI on the current primary NSO node.
  See the Dockerfile.router and router/run.sh file for details on the nft
  command used to set up the port forwarding.
- The NSO is installed by and started in the context of an "admin" user that
  belongs to the "ncsadmin" user group. sudo is installed as the Tail-f HCC
  implementation requires sudo when running its "vipctl" script in a non-root
  context. Linux capabilities such as network admin are added to containers and
  specific commands to allow the running in the context of the admin user. See
  the "docker run" command in the setup.sh file and the Dockerfile for details.

Further Reading
~~~~~~~~~~~~~~~
+ NSO Administrator Guide: NSO built-in HA & Tail-f HCC Package
+ examples.ncs/development-guide/high-availability examples
+ https://osrg.github.io/gobgp/
+ https://frrouting.org/
+ https://nftables.org/
+ https://wiki.linuxfoundation.org/networking/iproute2
+ https://docs.docker.com/engine/reference/run/
