An NSO Tail-f HCC Layer-2 Example Setup
=======================================

This is an example implementation for demonstration purposes of the example
setup described by the NSO Administration Guide chapter "Tail-f HCC Package"
under "Tail-f HCC Usage".
For details on the Tail-f HCC package, see the NSO Administration Guide.
While this example use containers it is not intended as a guide to running 
NSO in Docker. See "NSO in Docker for development and production" for
guidance: https://gitlab.com/nso-developer/nso-docker

Example Network Overview
~~~~~~~~~~~~~~~~~~~~~~~~
gateway: socat port forwarding + NAT
paris:   NSO, Tail-f HCC package (uses arping and iproute2 utils)
london:  NSO, Tail-f HCC package (uses arping and iproute2 utils)


  ----------  docker 0 default bridge  ----------
                          |
                          | .1
  -----------  ParisLondonNet bridge  -----------
        |                 |                |
        |                 |                |
                    192.168.23.0/16
        |                 |                |
        | .98             | .2             | .99
   +----------+     +----------+     +----------+
   | london   |     | gateway  |     | paris    |
   +----------+     +----------+     +----------+

Prerequisites
~~~~~~~~~~~~~
NSO_VERSION >= 5.8
nso-${NSO_VERSION}.linux.x86_64.installer.bin
ncs-${NSO_VERSION}-tailf-hcc-${TAILF_HCC_VERSION}.tar.gz
Docker installed

Running the Example
~~~~~~~~~~~~~~~~~~~
1. Add the NSO installation and Tail-f HCC packages into the directory of this
   README. If necessary, change the version number NSO_VERSION and
   TAILF_HCC_VERSION variables in the setup.sh file.
2. Run the setup.sh script:
     $ ./setup.sh
   In another shell:
     $ docker ps # to make sure the paris, london, and gateway containers are up
3. Examine the paris node output:
   The app/run.sh script will execute the following steps on the paris and
   london nodes:
   a. Reset, setup, start node 1 & 2, and enable HA assuming start-up settings.
      Initial VIP node is the paris node.
   b. Add some dummy config to node 1, replicated to secondary node 2
   c. Stop node 1 to make node 2 failover to primary role. VIP node becomes
      the london node.
   d. Start node 1 that will now assume secondary role
   e. Role-revert the nodes back to start-up settings
   f. Done! The paris node is again the VIP node.
   g. Follow the developer log.
4. Connect to the NSO CLI on the current primary node through the gateway VIP
   address:
     $ ssh -l admin -p 12024 localhost # mapped from the gateway 12024 to port
       to the 2024 VIP port on the current primary node.
     admin@ncs# show high-availability status
     admin@ncs# exit
5. Connect to the london and paris shell to examine the Linux
   kernel route status.
     $ docker exec -it paris bash
     admin@paris:~/app$ ip address show dev eth0
     admin@paris:~/app$ arp -a
     admin@paris:~/app$ exit
6. Examine the setup.sh -> Dockerfile -> app/run.sh -> app/Makefile ->
   gateway/run.sh files in that order.
7. Cleanup
     $Â docker stop paris london gateway
     $ docker network rm ParisLondonNet

Implementation Details
~~~~~~~~~~~~~~~~~~~~~~
This demo uses Docker containers to set up the Tail-f HCC NSO package in layer 2
mode with NSO and its dependencies as described in the NSO Administration
Guide chapter "Tail-f HCC Package". The steps for the paris and london
nodes described by the documentation are implemented by the setup.sh
Dockerfile, and app/run.sh files.
- The paris and london container nodes use the Debian Linux distribution while
  a simple gateway container for Docker host access through the VIP address uses
  the Alpine Linux distribution.
- See the Dockerfile.gatway and gateway/run.sh file for details on the socat
  command used to set up the port forwarding.
- The NSO is installed by and started in the context of an "admin" user that
  belongs to the "ncsadmin" user group. sudo is installed as the Tail-f HCC
  implementation requires sudo when running its "vipctl" script in a non-root
  context. Linux capabilities such as network admin are added to containers and
  specific commands to allow the running in the context of the admin user. See
  the "docker run" command in the setup.sh file and the Dockerfile for details.

Further Reading
~~~~~~~~~~~~~~~
+ NSO Administrator Guide: NSO built-in HA & Tail-f HCC Package
+ examples.ncs/development-guide/high-availability examples
+ https://github.com/ThomasHabets/arping
+ http://www.dest-unreach.org/socat/
+ https://wiki.linuxfoundation.org/networking/iproute2
+ https://docs.docker.com/engine/reference/run/
